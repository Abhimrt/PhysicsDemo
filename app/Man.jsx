/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 man.glb 
*/
"use client";
import React, { useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";

export function Model(props) {
  const { nodes, materials } = useGLTF("/man.glb");
  
  // for leva
  //neck ===========
  {
    const options = useMemo((a) => {
      return {
        x: { value: 1, min: -60, max: 28, step: 1 },
        y: { value: 1, min: -80, max: 80, step: 1 },
        z: { value: 1, min: -35, max: 35, step: 1 },
        // visible: true,
        // color: { value: 'lime' },
      }
    }, [])
    const neck = useControls('head', options)
    
    nodes.mixamorig5Neck.rotation.x = (Math.PI / 180) * neck.x;
    nodes.mixamorig5Neck.rotation.y = (Math.PI / 180) * neck.y;
    nodes.mixamorig5Neck.rotation.z = (Math.PI / 180) * neck.z;
  }

  //upper half part ===========
  {
    const options = useMemo((a) => {
      return {
        x: { value: 1, min: -50, max: 40, step: 1 },
        y: { value: 1, min: -20, max: 20, step: 1 },
        z: { value: 1, min: -30, max: 30, step: 1 },
        // visible: true,
        // color: { value: 'lime' },
      }
    }, [])
    const data = useControls('Upper Body', options)
    
    nodes.mixamorig5Spine.rotation.x = (Math.PI / 180) * data.x;
    nodes.mixamorig5Spine.rotation.y = (Math.PI / 180) * data.y;
    nodes.mixamorig5Spine.rotation.z = (Math.PI / 180) * data.z;
  }




  return (
    <group {...props} dispose={null} position={[0, -0.4, 0]}>
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.0055}>
        <primitive object={nodes.mixamorig5Hips} />
        <skinnedMesh
          geometry={nodes.Ch38_Body.geometry}
          material={materials.Ch38_body}
          skeleton={nodes.Ch38_Body.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Ch38_Eyelashes.geometry}
          material={materials.Ch38_hair}
          skeleton={nodes.Ch38_Eyelashes.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Ch38_Hair.geometry}
          material={materials.Ch38_hair}
          skeleton={nodes.Ch38_Hair.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Ch38_Shirt.geometry}
          material={materials.Ch38_body}
          skeleton={nodes.Ch38_Shirt.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Ch38_Shoes.geometry}
          material={materials.Ch38_body}
          skeleton={nodes.Ch38_Shoes.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Ch38_Shorts.geometry}
          material={materials.Ch38_body}
          skeleton={nodes.Ch38_Shorts.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Ch38_Socks.geometry}
          material={materials.Ch38_body}
          skeleton={nodes.Ch38_Socks.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/man.glb");
